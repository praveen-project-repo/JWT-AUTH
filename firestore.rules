/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the 'users' collection and its subcollections, ensuring that only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Only the user can read or write their own profile.
 * - /users/{userId}/refreshTokens/{refreshTokenId}: Stores refresh tokens for the user. Only the user can manage their own refresh tokens.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Refresh tokens are stored as subcollections of the user document to simplify access control.
 * - No schema validation is performed beyond what is necessary for authorization.
 *
 * Denormalization for Authorization:
 * - The 'userId' is included in the refresh token documents to allow direct validation of ownership without needing to read the parent user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents.  Only the user can read, update, or delete their own profile.  A user can create their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'test_user' with ID 'test_user' can create their own profile.
     * @allow (get) - User 'test_user' with ID 'test_user' can read their own profile.
     * @allow (update) - User 'test_user' with ID 'test_user' can update their own profile.
     * @allow (delete) - User 'test_user' with ID 'test_user' can delete their own profile.
     * @deny (create) - User 'another_user' attempts to create a profile with ID 'test_user'.
     * @deny (get) - User 'another_user' attempts to read the profile of 'test_user'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to refresh tokens for a user. Only the user can manage their own refresh tokens.
     * @path /users/{userId}/refreshTokens/{refreshTokenId}
     * @allow (create) - User 'test_user' with ID 'test_user' can create a refresh token in their own user document.
     * @allow (get) - User 'test_user' with ID 'test_user' can read a refresh token in their own user document.
     * @allow (update) - User 'test_user' with ID 'test_user' can update a refresh token in their own user document.
     * @allow (delete) - User 'test_user' with ID 'test_user' can delete a refresh token in their own user document.
     * @deny (create) - User 'another_user' attempts to create a refresh token in 'test_user's user document.
     * @deny (get) - User 'another_user' attempts to read a refresh token in 'test_user's user document.
     * @principle Enforces document ownership for all operations on refresh tokens.
     */
    match /users/{userId}/refreshTokens/{refreshTokenId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}